juid = 1001
jguid = 1002

cypress_tag = "${params.TEST_VERSION}"
docker_image = "docker-images-214113/automation-test-cypress"

def browser = "chrome"

secrets = [
    [ path: "faceit-infra/utility/automation-tests/${params.ENV}", 
      secretValues: [
        [envVar: 'CYPRESS_api_url', vaultKey: 'api_url'],
        [envVar: 'CYPRESS_automation_test_secret', vaultKey: 'automation_test_secret'],
        [envVar: 'CYPRESS_frontend_client_id', vaultKey: 'frontend_client_id'],
        [envVar: 'CYPRESS_frontend_client_secret', vaultKey: 'frontend_client_secret'],
        [envVar: 'CYPRESS_user_password_admin', vaultKey: 'user_password_admin'],
        [envVar: 'CYPRESS_user_password_autotest', vaultKey: 'user_password_autotest'],
        [envVar: 'CYPRESS_url', vaultKey: 'url']
      ]
    ],
    [ path: "faceit-infra/utility/automation-tests", 
      secretValues: [
        [envVar: 'CYPRESS_RECORD_KEY', vaultKey: 'cypress_record_key']
      ]
    ]
]

configuration = [vaultUrl: 'https://vault.faceit-infra.com',
                 vaultCredentialId: 'vault-approle']


def executeTest(suite, number) {
  script {
    docker.withRegistry('https://gcr.io', 'gcr:docker-images-214113') {
      docker.image("${docker_image}:${cypress_tag}").inside("\
          -u ${juid}:${jguid} \
          --entrypoint=''"){ c ->
          withVault([configuration: configuration, vaultSecrets: secrets]) {
              catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                  sh """
                    cd /home/jenkins
                    npm run ${suite}
                  """                            
              }
              sh """
                if [ -d '/home/jenkins/cypress/reports' ]; then
                  echo "Copying reports..."
                  cd /home/jenkins
                  cp -r /home/jenkins/cypress/reports /tmp/workspace/automatic_tests_cypress
                fi
              """
              stash allowEmpty: true, includes: 'reports/**/*', name: "report_${number}"
              junit testResults: 'reports/junit/**/*.xml', allowEmptyResults: true
          }
      }   
    }
  }
}

pipeline {
  agent {
    label 'backend'
  }

  stages {
    stage('check version') {

      steps {
        script {
          if ("${params.FRONTEND_VERSION}" != "latest") {
            
              KUBE_CLUSTER_NAME="${env.KUBE_DEV_CLUSTER_NAME}"
              KUBE_CLUSTER_REGION="${env.KUBE_DEV_CLUSTER_REGION}"
              GCP_PROJECT="${env.GCP_DEV_PROJECT}"
              KUBE_CLUSTER_CONTEXT="${env.KUBE_DEV_CLUSTER_CONTEXT}"
              NAMESPACE="${env.ENV}"
              
              if ( "${params.ENV}" == "prod"){
                  KUBE_CLUSTER_NAME="${env.KUBE_PROD_CLUSTER_NAME}"
                  KUBE_CLUSTER_REGION="${env.KUBE_PROD_CLUSTER_REGION}"
                  GCP_PROJECT="${env.GCP_PROD_PROJECT}"
                  KUBE_CLUSTER_CONTEXT="${env.KUBE_PROD_CLUSTER_CONTEXT}"
                  NAMESPACE="team-frontend"
              } else if ( "${params.ENV}" == "stage") {
                  KUBE_CLUSTER_NAME="${env.KUBE_STAGE_CLUSTER_NAME}"
                  KUBE_CLUSTER_REGION="${env.KUBE_STAGE_CLUSTER_REGION}"
                  GCP_PROJECT="${env.GCP_STAGE_PROJECT}"
                  KUBE_CLUSTER_CONTEXT="${env.KUBE_STAGE_CLUSTER_CONTEXT}"
                  NAMESPACE="team-frontend"
              }
              
            sh"""
              echo "Testing frontend version ${params.FRONTEND_VERSION} - Waiting for the release on ${params.ENV}..."
              gcloud container clusters get-credentials ${KUBE_CLUSTER_NAME} --zone ${KUBE_CLUSTER_REGION} --project ${GCP_PROJECT}
              ./scripts/check_deployment.sh -n ${NAMESPACE} frontend ${params.FRONTEND_VERSION}
            """
          }
        }
      }
    }
    stage('parallel tests') {
      environment {
        CYPRESS_trashAssetsBeforeRuns = 'false'
      }
      parallel {
        stage('test 1') {
          steps {
            executeTest("${params.SUITE}", "1")
          }          
        }

        stage('test 2') {
          steps {
            executeTest("${params.SUITE}", "2")
          }
        }

        stage('test 3') {
          steps {
            executeTest("${params.SUITE}", "3")
          }
        }

        stage('test 4') {
          steps {
            executeTest("${params.SUITE}", "4")
          }
        }
      }
    }
    stage('reports') {
      stages {
        stage('generate') {
          steps {
            script {
              docker.withRegistry('https://gcr.io', 'gcr:docker-images-214113') {
                docker.image("${docker_image}:${cypress_tag}").inside("\
                    -u ${juid}:${jguid} \
                    --entrypoint=''"){ c ->
                  withVault([configuration: configuration, vaultSecrets: secrets]) {
                    unstash 'report_1'
                    unstash 'report_2'
                    unstash 'report_3'
                    unstash 'report_4'
                    sh """
                      echo "Copying reports..."
                      cp -r reports /home/jenkins/cypress
                      cd /home/jenkins
                      echo "Combinying reports..."
                      npm run combine-reports
                      npm run generate-report
                      echo "Copying back reports..."
                      cp -r /home/jenkins/cypress/reports/mochaHtml /tmp/workspace/automatic_tests_cypress
                    """
                  }
                  stash allowEmpty: true, includes: 'mochaHtml/**/*', name: "report_html"
                }   
              }
            }
          }
        }
        stage('upload') {
          steps {
            unstash 'report_html'
            sh"""
              gsutil cp -r mochaHtml/* gs://faceit-automation-test-report/$JOB_NAME/$BUILD_NUMBER/
            """
          }
        }
      }
    }
  }
  post {
    cleanup {
      deleteDir()
      node('master') {
        script {
            def workspace = pwd()
            dir("${workspace}@script") {
                deleteDir()
            }
            dir("${workspace}@script@tmp") {
                deleteDir()
            }
        }
      }
    }
    success {
      script {
        blocks = [
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": "Tests reports - $ENV - $SUITE - ${FRONTEND_VERSION}\nhttps://storage.cloud.google.com/faceit-automation-test-report/$JOB_NAME/$BUILD_NUMBER/report.html\n"
            ]
          ]
        ]
      }
      slackSend(channel: "#automation_reports", 
                color : "good",
                botUser: true,
                blocks: blocks,
                tokenCredentialId: "slack-token")
    }
    unstable {
      script {
        blocks = [
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": "Tests reports - $ENV - $SUITE - ${FRONTEND_VERSION}\nhttps://storage.cloud.google.com/faceit-automation-test-report/$JOB_NAME/$BUILD_NUMBER/report.html\n"
            ]
          ]
        ]
      }
      slackSend(channel: "#automation_reports", 
                color : "warning",
                botUser: true,
                blocks: blocks,
                tokenCredentialId: "slack-token")
    }
    failure {
      script {
        blocks = [
          [
            "type": "section",
            "text": [
              "type": "mrkdwn",
              "text": "Tests reports - $ENV - $SUITE - ${FRONTEND_VERSION}\nhttps://storage.cloud.google.com/faceit-automation-test-report/$JOB_NAME/$BUILD_NUMBER/report.html\n"
            ]
          ]
        ]
      }
      slackSend(channel: "#automation_reports", 
                color : "danger",
                botUser: true,
                blocks: blocks,
                tokenCredentialId: "slack-token")
    }
  }
}